{"version":3,"sources":["app.ts","app2.ts","app3.ts","environment.ts","main.ts","resources/index.ts","app-v1.ts","app-v2.ts","app-v3.ts","app-v3 - Copy.ts","app-v.ts","app-v4.ts","assets/css/scss/reset.scss","assets/css/scss/matrix.scss"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":["export class App {\n    private matrix: HTMLElement;\n    private rows: Node[] = new Array<Node>();\n\n    protected characterWidth: number;\n    protected characterHeight: number;\n    protected charactersInRow: number;\n    protected rowsOnScreen: number;\n\n    protected characters: string[] = '                                        abcdefghijklmnopqrstuvwxyz0123456789'.split('');\n    protected charactersLength: number = this.characters.length;\n\n    protected screenHeight: number;\n    \n    attached() {\n        this.setWidthsAndHeights(this.matrix);\n        setInterval(() => this.tick(), 25);\n    }\n    \n    private getRowText(): string {\n        let theString: string = '';\n        for (let i: number = 0; i < this.charactersInRow; i++) {\n            theString += this.characters[Math.floor(Math.random() * (this.charactersLength))];;\n        }\n        return theString;\n    }\n\n    private tick() {\n        if (this.rows.length == 0) {\n            this.addRow();\n            return;\n        }\n\n        let top: number;\n\n        this.rows.forEach((value: Node, index: number) => {\n            let row: HTMLDivElement = value as HTMLDivElement;\n            top = parseInt(window.getComputedStyle(row, null).getPropertyValue('top'));\n            row.setAttribute('style', 'top: ' + (top + 1).toString() + 'px;');\n        });\n\n        // top now contains the value for the highest row on the screen.\n        if (top >= 0) {\n            this.addRow();\n        }\n\n        let bottomRow: HTMLDivElement = this.getBottomRow() as HTMLDivElement;\n        top = parseInt(window.getComputedStyle(bottomRow, null).getPropertyValue('top'));\n        if (top > this.screenHeight) {\n            let removedRows: Node[] = this.rows.splice(0, 1);\n            this.matrix.removeChild(removedRows[0]);\n        }\n    }\n\n    private addRow() {\n        let row: HTMLDivElement = document.createElement('div');\n        row.innerText = this.getRowText();\n        row.setAttribute('style', 'top: -' + this.characterHeight.toString() + 'px;');\n        row.setAttribute('class', 'matrix-row');\n        let newNode: Node = this.matrix.insertBefore(row, this.matrix.firstChild);\n        this.rows.push(newNode);\n    }\n\n    private getTopRow(): Node {\n        return this.rows[this.rows.length - 1];\n    }\n\n    private getBottomRow(): Node {\n        return this.rows[0];\n    }\n    \n    private setWidthsAndHeights(container: HTMLElement) {\n        this.screenHeight = container.clientHeight;\n\n        let oneCharacterContainer: HTMLSpanElement = document.createElement('span');\n        \n        oneCharacterContainer.innerText = 'A';\n        oneCharacterContainer.setAttribute('style', 'visibility:hidden; font-family: ' + window.getComputedStyle(container, null).getPropertyValue('font-family') + ';');\n        let addedNode: Node = container.appendChild(oneCharacterContainer)\n\n        this.characterWidth = oneCharacterContainer.getBoundingClientRect().width;\n        this.characterHeight = oneCharacterContainer.getBoundingClientRect().height;\n        this.charactersInRow = Math.floor(container.clientWidth / this.characterWidth) - 1;\n        this.rowsOnScreen = Math.ceil(container.clientHeight / this.characterHeight) + 1;\n        \n\n        container.removeChild(addedNode);\n    }\n}","export class App2 {\n    private matrix: HTMLElement;\n    private rows: MatrixRow[] = new Array<MatrixRow>();\n\n    protected characterWidth: number;\n    protected characterHeight: number;\n    protected charactersInRow: number;\n    protected rowsOnScreen: number;\n\n    protected characters: string[] = '                                        abcdefghijklmnopqrstuvwxyz0123456789'.split('');\n    protected charactersLength: number = this.characters.length;\n\n    protected screenHeight: number;\n    \n    attached() {\n        this.setWidthsAndHeights(this.matrix);\n        setInterval(() => this.tick(), 25);\n    }\n    \n    private getRowText(): string {\n        let theString: string = '';\n        for (let i: number = 0; i < this.charactersInRow; i++) {\n            theString += this.characters[Math.floor(Math.random() * (this.charactersLength))];;\n        }\n        return theString;\n    }\n\n    private tick() {\n        if (this.rows.length == 0) {\n            this.addRow();\n            return;\n        }\n        \n        this.rows.forEach((value: MatrixRow, index: number) => {\n            value.topPositioning++;\n        });\n\n        if (this.getTopRow().topPositioning >= 0) {\n            this.addRow();\n        }\n\n        if (this.getBottomRow().topPositioning > this.screenHeight) {\n            this.rows.splice(0, 1);\n        }\n    }\n\n    private addRow() {\n        let row: MatrixRow = new MatrixRow();\n        row.topPositioning = this.characterHeight * -1;\n        row.rowText = this.getRowText();\n        this.rows.push(row);\n        //this.rows.push({ topPositioning: this.characterHeight * -1, rowText: this.getRowText() });\n    }\n\n    private getTopRow(): MatrixRow {\n        return this.rows[this.rows.length - 1];\n    }\n\n    private getBottomRow(): MatrixRow {\n        return this.rows[0];\n    }\n    \n    private setWidthsAndHeights(container: HTMLElement) {\n        this.screenHeight = container.clientHeight;\n\n        let oneCharacterContainer: HTMLSpanElement = document.createElement('span');\n        \n        oneCharacterContainer.innerText = 'A';\n        oneCharacterContainer.setAttribute('style', 'visibility:hidden; font-family: ' + window.getComputedStyle(container, null).getPropertyValue('font-family') + ';');\n        let addedNode: Node = container.appendChild(oneCharacterContainer)\n\n        this.characterWidth = oneCharacterContainer.getBoundingClientRect().width;\n        this.characterHeight = oneCharacterContainer.getBoundingClientRect().height;\n        this.charactersInRow = Math.floor(container.clientWidth / this.characterWidth) - 1;\n        this.rowsOnScreen = Math.ceil(container.clientHeight / this.characterHeight) + 1;\n        \n\n        container.removeChild(addedNode);\n    }\n}\n\nexport class MatrixRow {\n    public topPositioning: number;\n    public rowText: string;\n}","import {computedFrom} from \"aurelia-framework\";\n\nexport class App2 {\n    private matrix: HTMLElement;\n    private rows: MatrixRow[] = new Array<MatrixRow>();\n\n    protected characterWidth: number;\n    protected characterHeight: number;\n    protected charactersInRow: number;\n    protected rowsOnScreen: number;\n\n    protected minSpeed: number = 30;\n    protected maxSpeed: number = 70;\n\n    protected minCharacterFactor: number = 0.5;\n    protected minCharacters: number;\n\n    protected characters: string[] = 'abcdefghijklmnopqrstuvwxyz0123456789'.split('');\n    \n    protected screenHeight: number;\n    \n    attached() {\n        this.setWidthsAndHeights(this.matrix);\n        \n        for (let i: number = 0; i < this.charactersInRow; i++) {\n            this.addRow();\n        }\n\n        setInterval(() => this.tick(), 25);\n    }\n    \n    private tick() {\n        this.rows.forEach((value: MatrixRow, index: number) => {\n            value.topPositioning += value.pixelsPerTick;\n\n            if (value.topPositioning > this.screenHeight) {\n                this.resetRow(value);\n            }\n        });\n        \n        \n    }\n\n    private addRow() {\n        let row: MatrixRow = new MatrixRow();\n        row.leftPosition = this.rows.length * this.characterWidth;\n        row.rowWidth = this.characterWidth;\n        this.resetRow(row);\n        this.rows.push(row);\n    }\n\n    private resetRow(row: MatrixRow) {\n        row.setRowText(this.rowsOnScreen, this.minCharacters, this.characters);\n        row.pixelsPerTick = ((Math.ceil(Math.random() * (this.maxSpeed - this.minSpeed)) + this.minSpeed) / 10);\n        row.topPositioning = this.characterHeight * row.charactersInRow * -1;\n    }\n\n    private getTopRow(): MatrixRow {\n        return this.rows[this.rows.length - 1];\n    }\n\n    private getBottomRow(): MatrixRow {\n        return this.rows[0];\n    }\n    \n    private setWidthsAndHeights(container: HTMLElement) {\n        this.screenHeight = container.clientHeight;\n\n        let oneCharacterContainer: HTMLSpanElement = document.createElement('span');\n        \n        oneCharacterContainer.innerText = 'A';\n        oneCharacterContainer.setAttribute('style', 'visibility:hidden; font-family: ' + window.getComputedStyle(container, null).getPropertyValue('font-family') + ';');\n        let addedNode: Node = container.appendChild(oneCharacterContainer)\n\n        this.characterWidth = oneCharacterContainer.getBoundingClientRect().width;\n        this.characterHeight = oneCharacterContainer.getBoundingClientRect().height;\n        this.charactersInRow = Math.floor(container.clientWidth / this.characterWidth) - 1;\n        this.rowsOnScreen = Math.ceil(container.clientHeight / this.characterHeight) + 1;\n        this.minCharacters = Math.ceil(this.rowsOnScreen * this.minCharacterFactor);\n\n        container.removeChild(addedNode);\n    }\n}\n\nexport class MatrixRow {\n    public leftPosition: number;\n    public topPositioning: number;\n    public rowWidth: number;\n    \n    public pixelsPerTick: number;\n    \n    public rowText: string;\n    public charactersInRow: number;\n\n    @computedFrom(\"topPositioning\")\n    get cssText() {\n        return `top: ${this.topPositioning}px; left: ${this.leftPosition}px; width: ${this.rowWidth}px;`;\n    }\n    \n    public setRowText(rowsOnScreen: number, minCharacters: number, characters: string[]) {\n        let theString: string = '';\n        this.charactersInRow = Math.ceil(Math.random() * (rowsOnScreen - minCharacters)) + minCharacters;\n        \n        for (let i: number = 0; i < this.charactersInRow; i++) {\n            if (i > 0) {\n                theString += '<br />';\n            }\n            theString += characters[Math.floor(Math.random() * (characters.length))];\n        }\n\n        this.rowText = theString;\n    }\n\n}","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\n//Configure Bluebird Promises.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot('app-v4', document.body));\n}\n","/// <reference path=\"../../typings/index.d.ts\" />\nimport {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n","export class App {\n    private matrix: HTMLElement;\n    private rows: Node[] = new Array<Node>();\n\n    protected characterWidth: number;\n    protected characterHeight: number;\n    protected charactersInRow: number;\n    protected rowsOnScreen: number;\n\n    protected characters: string[] = '                                        abcdefghijklmnopqrstuvwxyz0123456789'.split('');\n    protected charactersLength: number = this.characters.length;\n\n    protected screenHeight: number;\n    \n    attached() {\n        this.setWidthsAndHeights(this.matrix);\n        setInterval(() => this.tick(), 25);\n    }\n    \n    private getRowText(): string {\n        let theString: string = '';\n        for (let i: number = 0; i < this.charactersInRow; i++) {\n            theString += this.characters[Math.floor(Math.random() * (this.charactersLength))];;\n        }\n        return theString;\n    }\n\n    private tick() {\n        if (this.rows.length == 0) {\n            this.addRow();\n            return;\n        }\n\n        let top: number;\n\n        this.rows.forEach((value: Node, index: number) => {\n            let row: HTMLDivElement = value as HTMLDivElement;\n            top = parseInt(window.getComputedStyle(row, null).getPropertyValue('top'));\n            row.setAttribute('style', 'top: ' + (top + 1).toString() + 'px;');\n        });\n\n        // top now contains the value for the highest row on the screen.\n        if (top >= 0) {\n            this.addRow();\n        }\n\n        let bottomRow: HTMLDivElement = this.getBottomRow() as HTMLDivElement;\n        top = parseInt(window.getComputedStyle(bottomRow, null).getPropertyValue('top'));\n        if (top > this.screenHeight) {\n            let removedRows: Node[] = this.rows.splice(0, 1);\n            this.matrix.removeChild(removedRows[0]);\n        }\n    }\n\n    private addRow() {\n        let row: HTMLDivElement = document.createElement('div');\n        row.innerText = this.getRowText();\n        row.setAttribute('style', 'top: -' + this.characterHeight.toString() + 'px;');\n        row.setAttribute('class', 'matrix-row');\n        let newNode: Node = this.matrix.insertBefore(row, this.matrix.firstChild);\n        this.rows.push(newNode);\n    }\n\n    private getTopRow(): Node {\n        return this.rows[this.rows.length - 1];\n    }\n\n    private getBottomRow(): Node {\n        return this.rows[0];\n    }\n    \n    private setWidthsAndHeights(container: HTMLElement) {\n        this.screenHeight = container.clientHeight;\n\n        let oneCharacterContainer: HTMLSpanElement = document.createElement('span');\n        \n        oneCharacterContainer.innerText = 'A';\n        oneCharacterContainer.setAttribute('style', 'visibility:hidden; font-family: ' + window.getComputedStyle(container, null).getPropertyValue('font-family') + ';');\n        let addedNode: Node = container.appendChild(oneCharacterContainer)\n\n        this.characterWidth = oneCharacterContainer.getBoundingClientRect().width;\n        this.characterHeight = oneCharacterContainer.getBoundingClientRect().height;\n        this.charactersInRow = Math.floor(container.clientWidth / this.characterWidth) - 1;\n        this.rowsOnScreen = Math.ceil(container.clientHeight / this.characterHeight) + 1;\n        \n\n        container.removeChild(addedNode);\n    }\n}","export class App2 {\n    private matrix: HTMLElement;\n    private rows: MatrixRow[] = new Array<MatrixRow>();\n\n    protected characterWidth: number;\n    protected characterHeight: number;\n    protected charactersInRow: number;\n    protected rowsOnScreen: number;\n\n    protected characters: string[] = '                                        abcdefghijklmnopqrstuvwxyz0123456789'.split('');\n    protected charactersLength: number = this.characters.length;\n\n    protected screenHeight: number;\n    \n    attached() {\n        this.setWidthsAndHeights(this.matrix);\n        setInterval(() => this.tick(), 25);\n    }\n    \n    private getRowText(): string {\n        let theString: string = '';\n        for (let i: number = 0; i < this.charactersInRow; i++) {\n            theString += this.characters[Math.floor(Math.random() * (this.charactersLength))];;\n        }\n        return theString;\n    }\n\n    private tick() {\n        if (this.rows.length == 0) {\n            this.addRow();\n            return;\n        }\n        \n        this.rows.forEach((value: MatrixRow, index: number) => {\n            value.topPositioning++;\n        });\n\n        if (this.getTopRow().topPositioning >= 0) {\n            this.addRow();\n        }\n\n        if (this.getBottomRow().topPositioning > this.screenHeight) {\n            this.rows.splice(0, 1);\n        }\n    }\n\n    private addRow() {\n        let row: MatrixRow = new MatrixRow();\n        row.topPositioning = this.characterHeight * -1;\n        row.rowText = this.getRowText();\n        this.rows.push(row);\n        //this.rows.push({ topPositioning: this.characterHeight * -1, rowText: this.getRowText() });\n    }\n\n    private getTopRow(): MatrixRow {\n        return this.rows[this.rows.length - 1];\n    }\n\n    private getBottomRow(): MatrixRow {\n        return this.rows[0];\n    }\n    \n    private setWidthsAndHeights(container: HTMLElement) {\n        this.screenHeight = container.clientHeight;\n\n        let oneCharacterContainer: HTMLSpanElement = document.createElement('span');\n        \n        oneCharacterContainer.innerText = 'A';\n        oneCharacterContainer.setAttribute('style', 'visibility:hidden; font-family: ' + window.getComputedStyle(container, null).getPropertyValue('font-family') + ';');\n        let addedNode: Node = container.appendChild(oneCharacterContainer)\n\n        this.characterWidth = oneCharacterContainer.getBoundingClientRect().width;\n        this.characterHeight = oneCharacterContainer.getBoundingClientRect().height;\n        this.charactersInRow = Math.floor(container.clientWidth / this.characterWidth) - 1;\n        this.rowsOnScreen = Math.ceil(container.clientHeight / this.characterHeight) + 1;\n        \n\n        container.removeChild(addedNode);\n    }\n}\n\nexport class MatrixRow {\n    public topPositioning: number;\n    public rowText: string;\n}","import {computedFrom} from \"aurelia-framework\";\n\nexport class App2 {\n    private matrix: HTMLElement;\n    private rows: MatrixRow[] = new Array<MatrixRow>();\n\n    protected characterWidth: number;\n    protected characterHeight: number;\n    protected charactersInRow: number;\n    protected rowsOnScreen: number;\n\n    protected minSpeed: number = 30;\n    protected maxSpeed: number = 70;\n\n    protected minCharacterFactor: number = 0.5;\n    protected minCharacters: number;\n\n    protected characters: string[] = 'abcdefghijklmnopqrstuvwxyz0123456789'.split('');\n    \n    protected screenHeight: number;\n    \n    attached() {\n        this.setWidthsAndHeights(this.matrix);\n        \n        for (let i: number = 0; i < this.charactersInRow; i++) {\n            this.addRow();\n        }\n\n        setInterval(() => this.tick(), 25);\n    }\n    \n    private tick() {\n        this.rows.forEach((value: MatrixRow, index: number) => {\n            value.topPositioning += value.pixelsPerTick;\n\n            if (value.topPositioning > this.screenHeight) {\n                this.resetRow(value);\n            }\n        });\n        \n        \n    }\n\n    private addRow() {\n        let row: MatrixRow = new MatrixRow();\n        row.leftPosition = this.rows.length * this.characterWidth;\n        row.rowWidth = this.characterWidth;\n        this.resetRow(row);\n        this.rows.push(row);\n    }\n\n    private resetRow(row: MatrixRow) {\n        row.setRowText(this.rowsOnScreen, this.minCharacters, this.characters);\n        row.pixelsPerTick = ((Math.ceil(Math.random() * (this.maxSpeed - this.minSpeed)) + this.minSpeed) / 10);\n        row.topPositioning = this.characterHeight * row.charactersInRow * -1;\n    }\n\n    private getTopRow(): MatrixRow {\n        return this.rows[this.rows.length - 1];\n    }\n\n    private getBottomRow(): MatrixRow {\n        return this.rows[0];\n    }\n    \n    private setWidthsAndHeights(container: HTMLElement) {\n        this.screenHeight = container.clientHeight;\n\n        let oneCharacterContainer: HTMLSpanElement = document.createElement('span');\n        \n        oneCharacterContainer.innerText = 'A';\n        oneCharacterContainer.setAttribute('style', 'visibility:hidden; font-family: ' + window.getComputedStyle(container, null).getPropertyValue('font-family') + ';');\n        let addedNode: Node = container.appendChild(oneCharacterContainer)\n\n        this.characterWidth = oneCharacterContainer.getBoundingClientRect().width;\n        this.characterHeight = oneCharacterContainer.getBoundingClientRect().height;\n        this.charactersInRow = Math.floor(container.clientWidth / this.characterWidth) - 1;\n        this.rowsOnScreen = Math.ceil(container.clientHeight / this.characterHeight) + 1;\n        this.minCharacters = Math.ceil(this.rowsOnScreen * this.minCharacterFactor);\n\n        container.removeChild(addedNode);\n    }\n}\n\nexport class MatrixRow {\n    public leftPosition: number;\n    public topPositioning: number;\n    public rowWidth: number;\n    \n    public pixelsPerTick: number;\n    \n    public rowText: string;\n    public charactersInRow: number;\n\n    @computedFrom(\"topPositioning\")\n    get cssText() {\n        return `top: ${this.topPositioning}px; left: ${this.leftPosition}px; width: ${this.rowWidth}px;`;\n    }\n    \n    public setRowText(rowsOnScreen: number, minCharacters: number, characters: string[]) {\n        let theString: string = '';\n        this.charactersInRow = Math.ceil(Math.random() * (rowsOnScreen - minCharacters)) + minCharacters;\n        \n        for (let i: number = 0; i < this.charactersInRow; i++) {\n            if (i > 0) {\n                theString += '<br />';\n            }\n            theString += characters[Math.floor(Math.random() * (characters.length))];\n        }\n\n        this.rowText = theString;\n    }\n\n}","import {computedFrom} from \"aurelia-framework\";\n\nexport class App2 {\n    private matrix: HTMLElement;\n    private rows: MatrixRow[] = new Array<MatrixRow>();\n\n    protected characterWidth: number;\n    protected characterHeight: number;\n    protected charactersInRow: number;\n    protected rowsOnScreen: number;\n\n    protected minSpeed: number = 30;\n    protected maxSpeed: number = 70;\n\n    protected minCharacterFactor: number = 0.5;\n    protected minCharacters: number;\n\n    protected characters: string[] = 'abcdefghijklmnopqrstuvwxyz0123456789'.split('');\n    \n    protected screenHeight: number;\n    \n    attached() {\n        this.setWidthsAndHeights(this.matrix);\n        \n        for (let i: number = 0; i < this.charactersInRow; i++) {\n            this.addRow();\n        }\n\n        setInterval(() => this.tick(), 25);\n    }\n    \n    private tick() {\n        this.rows.forEach((value: MatrixRow, index: number) => {\n            value.topPositioning += value.pixelsPerTick;\n\n            if (value.topPositioning > this.screenHeight) {\n                this.resetRow(value);\n            }\n        });\n        \n        \n    }\n\n    private addRow() {\n        let row: MatrixRow = new MatrixRow();\n        row.leftPosition = this.rows.length * this.characterWidth;\n        row.rowWidth = this.characterWidth;\n        this.resetRow(row);\n        this.rows.push(row);\n    }\n\n    private resetRow(row: MatrixRow) {\n        row.setRowText(this.rowsOnScreen, this.minCharacters, this.characters);\n        row.pixelsPerTick = ((Math.ceil(Math.random() * (this.maxSpeed - this.minSpeed)) + this.minSpeed) / 10);\n        row.topPositioning = this.characterHeight * row.charactersInRow * -1;\n    }\n\n    private getTopRow(): MatrixRow {\n        return this.rows[this.rows.length - 1];\n    }\n\n    private getBottomRow(): MatrixRow {\n        return this.rows[0];\n    }\n    \n    private setWidthsAndHeights(container: HTMLElement) {\n        this.screenHeight = container.clientHeight;\n\n        let oneCharacterContainer: HTMLSpanElement = document.createElement('span');\n        \n        oneCharacterContainer.innerText = 'A';\n        oneCharacterContainer.setAttribute('style', 'visibility:hidden; font-family: ' + window.getComputedStyle(container, null).getPropertyValue('font-family') + ';');\n        let addedNode: Node = container.appendChild(oneCharacterContainer)\n\n        this.characterWidth = oneCharacterContainer.getBoundingClientRect().width;\n        this.characterHeight = oneCharacterContainer.getBoundingClientRect().height;\n        this.charactersInRow = Math.floor(container.clientWidth / this.characterWidth) - 1;\n        this.rowsOnScreen = Math.ceil(container.clientHeight / this.characterHeight) + 1;\n        this.minCharacters = Math.ceil(this.rowsOnScreen * this.minCharacterFactor);\n\n        container.removeChild(addedNode);\n    }\n}\n\nexport class MatrixRow {\n    public leftPosition: number;\n    public topPositioning: number;\n    public rowWidth: number;\n    \n    public pixelsPerTick: number;\n    \n    public rowText: string;\n    public charactersInRow: number;\n\n    @computedFrom(\"topPositioning\")\n    get cssText() {\n        return `top: ${this.topPositioning}px; left: ${this.leftPosition}px; width: ${this.rowWidth}px;`;\n    }\n    \n    public setRowText(rowsOnScreen: number, minCharacters: number, characters: string[]) {\n        let theString: string = '';\n        this.charactersInRow = Math.ceil(Math.random() * (rowsOnScreen - minCharacters)) + minCharacters;\n        \n        for (let i: number = 0; i < this.charactersInRow; i++) {\n            if (i > 0) {\n                theString += '<br />';\n            }\n            theString += characters[Math.floor(Math.random() * (characters.length))];\n        }\n\n        this.rowText = theString;\n    }\n\n}","import {computedFrom} from \"aurelia-framework\";\n\nexport class App2 {\n    private matrix: HTMLElement;\n    private rows: MatrixRow[] = new Array<MatrixRow>();\n\n    protected characterWidth: number;\n    protected characterHeight: number;\n    protected charactersInRow: number;\n    protected rowsOnScreen: number;\n\n    protected minSpeed: number = 30;\n    protected maxSpeed: number = 70;\n\n    protected minCharacterFactor: number = 0.5;\n    protected minCharacters: number;\n\n    protected characters: string[] = 'abcdefghijklmnopqrstuvwxyz0123456789'.split('');\n    \n    protected screenHeight: number;\n    \n    attached() {\n        this.setWidthsAndHeights(this.matrix);\n        \n        for (let i: number = 0; i < this.charactersInRow; i++) {\n            this.addRow();\n        }\n\n        setInterval(() => this.tick(), 25);\n    }\n    \n    private tick() {\n        this.rows.forEach((value: MatrixRow, index: number) => {\n            value.topPositioning += value.pixelsPerTick;\n\n            if (value.topPositioning > this.screenHeight) {\n                this.resetRow(value);\n            }\n        });\n        \n        \n    }\n\n    private addRow() {\n        let row: MatrixRow = new MatrixRow();\n        row.leftPosition = this.rows.length * this.characterWidth;\n        row.rowWidth = this.characterWidth;\n        this.resetRow(row);\n        this.rows.push(row);\n    }\n\n    private resetRow(row: MatrixRow) {\n        row.setRowText(this.rowsOnScreen, this.minCharacters, this.characters);\n        row.pixelsPerTick = ((Math.ceil(Math.random() * (this.maxSpeed - this.minSpeed)) + this.minSpeed) / 10);\n        row.topPositioning = this.characterHeight * row.charactersInRow * -1;\n    }\n\n    private getTopRow(): MatrixRow {\n        return this.rows[this.rows.length - 1];\n    }\n\n    private getBottomRow(): MatrixRow {\n        return this.rows[0];\n    }\n    \n    private setWidthsAndHeights(container: HTMLElement) {\n        this.screenHeight = container.clientHeight;\n\n        let oneCharacterContainer: HTMLSpanElement = document.createElement('span');\n        \n        oneCharacterContainer.innerText = 'A';\n        oneCharacterContainer.setAttribute('style', 'visibility:hidden; font-family: ' + window.getComputedStyle(container, null).getPropertyValue('font-family') + ';');\n        let addedNode: Node = container.appendChild(oneCharacterContainer)\n\n        this.characterWidth = oneCharacterContainer.getBoundingClientRect().width;\n        this.characterHeight = oneCharacterContainer.getBoundingClientRect().height;\n        this.charactersInRow = Math.floor(container.clientWidth / this.characterWidth) - 1;\n        this.rowsOnScreen = Math.ceil(container.clientHeight / this.characterHeight) + 1;\n        this.minCharacters = Math.ceil(this.rowsOnScreen * this.minCharacterFactor);\n\n        container.removeChild(addedNode);\n    }\n}\n\nexport class MatrixRow {\n    public leftPosition: number;\n    public topPositioning: number;\n    public rowWidth: number;\n    \n    public pixelsPerTick: number;\n    \n    public rowText: string;\n    public charactersInRow: number;\n\n    @computedFrom(\"topPositioning\")\n    get cssText() {\n        return `top: ${this.topPositioning}px; left: ${this.leftPosition}px; width: ${this.rowWidth}px;`;\n    }\n    \n    public setRowText(rowsOnScreen: number, minCharacters: number, characters: string[]) {\n        let theString: string = '';\n        this.charactersInRow = Math.ceil(Math.random() * (rowsOnScreen - minCharacters)) + minCharacters;\n        \n        for (let i: number = 0; i < this.charactersInRow; i++) {\n            if (i > 0) {\n                theString += '<br />';\n            }\n            theString += characters[Math.floor(Math.random() * (characters.length))];\n        }\n\n        this.rowText = theString;\n    }\n\n}","/**\n * TODO::\n * The columns need to fade out, not just remove the characters.\n * All columns should reach the bottom.\n * The top fade-out should happen after a randomised delay - re-use the start delay?\n * The column is reset when the bottom character has been faded out.\n */ \nimport {computedFrom} from \"aurelia-framework\";\n\nexport class App {\n    private matrix: HTMLElement;\n    private rows: MatrixRow[] = new Array<MatrixRow>();\n\n    protected characterWidth: number;\n    protected characterHeight: number;\n    protected charactersInRow: number;\n    protected rowsOnScreen: number;\n\n    protected minSpeed: number = 30;\n    protected maxSpeed: number = 70;\n\n    protected minCharacterFactor: number = 0.5;\n    protected minCharacters: number;\n    \n    protected minColumnDelay: number = 0;\n    protected maxColumnDelay: number = 5;\n\n    protected characters: string[] = 'abcdefghijklmnopqrstuvwxyz0123456789'.split('');\n    \n    protected screenHeight: number;\n    \n    attached() {\n        this.setWidthsAndHeights(this.matrix);\n        \n        for (let i: number = 0; i < this.charactersInRow; i++) {\n            this.addRow();\n        }\n\n        setInterval(() => this.tick(), 25);\n    }\n    \n    private tick() {\n        this.rows.filter(value => value.doTick === true).forEach((value: MatrixRow) => {\n            if (value.addCharacters)\n            {\n                value.pseudoHeight += value.pixelsPerTick;\n                value.charactersToDisplay = Math.floor(value.pseudoHeight / this.characterHeight);\n\n                value.addCharacters = (value.charactersToDisplay < value.rowCharacters.length);\n            }\n            else\n            {\n                // This is essentially like having a box overlay the column, growing in height every tick and covering characters.\n                value.topPositioning += value.pixelsPerTick;\n\n                // The total number of characters that would at least partially covered by the pseudo overlay.\n                value.charactersToRemove = Math.ceil(value.topPositioning / this.characterHeight);\n                \n                if (value.charactersToRemove > value.charactersToDisplay)\n                {\n                    this.resetRow(value);\n                }\n            }\n        });\n    }\n\n    private addRow() {\n        let row: MatrixRow = new MatrixRow();\n        row.leftPosition = this.rows.length * this.characterWidth;\n        this.resetRow(row);\n        this.rows.push(row);\n    }\n\n    private resetRow(row: MatrixRow) {\n        row.doTick = false;\n        row.addCharacters = true;\n        row.pseudoHeight = 0;\n        row.topPositioning = 0;\n        row.charactersToDisplay = 0;\n        row.charactersToRemove = 0;\n        row.setRowText(this.rowsOnScreen, this.minCharacters, this.characters);\n        row.pixelsPerTick = (App.getRandomNumberBetween(this.maxSpeed, this.minSpeed) / 10);\n        setTimeout(() => {row.doTick = true}, App.getRandomNumberBetween(this.minColumnDelay, this.maxColumnDelay) * 1000)\n    }\n\n    private getTopRow(): MatrixRow {\n        return this.rows[this.rows.length - 1];\n    }\n\n    private getBottomRow(): MatrixRow {\n        return this.rows[0];\n    }\n\n    public static getRandomNumberBetween(min: number, max: number) : number {\n        return (Math.ceil(Math.random() * (max - min)) + min);\n    }\n    \n    private setWidthsAndHeights(container: HTMLElement) {\n        this.screenHeight = container.clientHeight;\n\n        let oneCharacterContainer: HTMLSpanElement = document.createElement('span');\n        \n        oneCharacterContainer.innerText = 'A';\n        oneCharacterContainer.setAttribute('style', 'visibility:hidden; font-family: ' + window.getComputedStyle(container, null).getPropertyValue('font-family') + ';');\n        let addedNode: Node = container.appendChild(oneCharacterContainer)\n\n        this.characterWidth = oneCharacterContainer.getBoundingClientRect().width;\n        this.characterHeight = oneCharacterContainer.getBoundingClientRect().height;\n        this.charactersInRow = Math.floor(container.clientWidth / this.characterWidth) - 1;\n        this.rowsOnScreen = Math.ceil(container.clientHeight / this.characterHeight) + 1;\n        this.minCharacters = Math.ceil(this.rowsOnScreen * this.minCharacterFactor);\n\n        container.removeChild(addedNode);\n    }\n}\n\nexport class MatrixRow {\n    public leftPosition: number;\n    public topPositioning: number = 0;\n\n    public pseudoHeight: number = 0;\n    \n    public charactersToDisplay: number = 0;\n    public charactersToRemove: number = 0;\n    public pixelsPerTick: number;\n    \n    public rowCharacters: string[] = new Array<string>();\n\n    public addCharacters = true;\n    \n    public doTick: boolean = false;\n\n    @computedFrom(\"topPositioning\")\n    get cssText(): string {\n        return `left: ${this.leftPosition}px; top: ${this.topPositioning}px`;\n    }\n    \n    @computedFrom(\"charactersToDisplay\", \"charactersToRemove\")\n    get rowText(): string {\n        return this.rowCharacters.filter((value, index) => (index >= this.charactersToRemove && index < this.charactersToDisplay)).join('<br />');\n    }\n\n    public setRowText(rowsOnScreen: number, minCharacters: number, characters: string[]) {\n        this.rowCharacters = new Array<string>();\n        for (let i: number = 0; i < App.getRandomNumberBetween(rowsOnScreen, minCharacters); i++) {\n            this.rowCharacters.push(characters[Math.floor(Math.random() * (characters.length))]);\n        }\n    }\n\n}","html, body {\r\n    width: 100%;\r\n    min-width: 100%;\r\n    height: 100%;\r\n    min-height: 100%;\r\n    padding: 0;\r\n    margin: 0;\r\n}","@import 'reset';\r\n\r\n$screen-colour: black;\r\n$text-colour: green;\r\n$text-fade-colour: white;\r\n\r\n#matrix {\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: $screen-colour;\r\n    color: $text-colour;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    font-family:'Courier New';\r\n    font-size: 50px;\r\n    text-align: center;\r\n    white-space: pre;\r\n    overflow: hidden;\r\n}\r\n\r\n#matrix .matrix-row {\r\n    position:absolute;\r\n    top:0;\r\n    left:0;\r\n}\r\n\r\n#matrix .matrix-column {\r\n    background-image: linear-gradient(to bottom, $text-colour, $text-colour, $text-colour, $text-fade-colour);\r\n    color: transparent;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    text-align: center;\r\n}"],"sourceRoot":".."}